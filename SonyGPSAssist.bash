#!/bin/bash
# SonyGPSAssist.bash
#
# Sony cameras which embed a GPS are able to use assist data to accelerate the
# positioning.
# This script downloads and writes Sony GPS assist data to SD cards under Linux.
#
# Copyright (C) 2015 Frédéric BISSON
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License along
# with this program; if not, write to the Free Software Foundation, Inc.,
# 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.

GPSDATA="http://control.d-imaging.sony.co.jp/GPS/assistme.dat"
GPSMD5="http://control.d-imaging.sony.co.jp/GPS/assistme.md5"

SONYBASEDIR="PRIVATE/SONY"
SONYGPSDIR="$SONYBASEDIR/GPS"

# Try to run a command. If it does not exit well, the script is immediately
# stopped
function try {
    # Show message
    printf "%s... " "$1" >&2
    shift

    # Run command
    "$@"

    # Check return code
    local rc=$?
    if [ $rc -eq 0 ]
    then
        printf 'OK\n' >&2
        return 0
    else
        printf 'Error! (rc=%d)\n' "$rc" >&2
        exit "$rc"
    fi
}

# Check a command is present and immediately exit the script if it is not.
function check_command () {
    try "Check $1 command" which "$1" > /dev/null
}

# Retrieve an URL using curl and send it to the standard output
function http_get () {
    curl --silent --fail -- "$1"
}

# Retrieve a binary file and converts it to base64. It allows the file to be
# used in a shell variables though it is binary.
function http_get_bin () {
    http_get "$1" | base64
}

# Output a binary variable generated by http_get_bin
function echo_bin () {
    printf '%s' "$1" | base64 --decode
}

# List all mount points which are of VFAT filesystem
function list_vfat_mount () {
    df -l -t vfat | tail -n +2 | grep -o '[^ ]*$'
}

# Read mount directories on the standard input and only those which contains
# the Sony directories and are writables
function filter_sony () {
    local mountdir sonydir

    while read mountdir
    do
        sonydir="$mountdir/$SONYBASEDIR"
        test -d "$sonydir" -a -w "$sonydir" && printf '%s\n' "$mountdir"
    done
}

# Check all commands are present in order to run this script
check_command curl
check_command md5sum
check_command base64

# Retrieve GPS data and MD5 from Sony site
gps_data=$(try "Get GPS data from Sony" http_get_bin "$GPSDATA")
gps_md5=$(try "Get MD5 from Sony" http_get "$GPSMD5" | cut -c 1-32)

# Compute MD5 of the GPS data received
gps_true_md5=$(echo_bin "$gps_data" | md5sum | cut -d " " -f 1)

try "Check MD5" test "$gps_true_md5" = "$gps_md5"

# For each VFAT filesystem which has Sony directories...
list_vfat_mount | filter_sony | while read mountdir
do
    # Create the GPS directory
    try "Create $mountdir/$SONYGPSDIR" \
        mkdir --parents -- "$mountdir/$SONYGPSDIR"

    # Write the GPS data
    try "Create $mountdir/$SONYGPSDIR/assistme.dat" \
        echo_bin "$gps_data" > "$mountdir/$SONYGPSDIR/assistme.dat"
done

